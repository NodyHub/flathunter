# Should the bot endlessly looop through the URLs?
# Between each loop it waits for <sleeping_time> seconds.
loop:
    active: yes
    sleeping_time: 600

# List the URLs containing your filter properties below.
# Currently supported services: www.immobilienscout24.de and
# www.wg-gesucht.de. List the URLs in the following format:
# urls:
# 	- "https://www.immobilienscout24.de/Suche/..."
# 	- "https://www.wg-gesucht.de/..."
urls:

# There are often city districts in the address which
# Google Maps does not like. Use this blacklist to remove
# districts from the search.
blacklist:
  - Innenstadt

# If an expose includes an address, the bot is capable of
# displaying the distance and time to travel (duration) to
# some configured other addresses, for specific kinds of
# travel.
#  
# Available kinds of travel ('gm_id') can be found in the
# Google Maps API documentation, but basically there are:
# 	- "bicyle"
#	- "transit" (public transport)
#	- "driving"
#   - "walking"
# 
# The example configuration below includes a place for
# "John", located at the main train station of munich.
# Two kinds of travel (bicycle and transit) are requested,
# each with a different label. Furthermore a place for
# "Jane" is included, located at the given destination and
# with the same kinds of travel.
#durations:
#    - name: John
#      destination: Hauptbahnhof, München
#      modes:
#          - gm_id: transit
#            title: "Öff."
#          - gm_id: bicycle
#            title: "Rad"
#    - name: Jane
#      destination: Karlsplatz, München
#      modes:
#          - gm_id: transit
#            title: "Öff."
#          - gm_id: driving
#            title: "Auto"

# Multiline message (yes, the | is supposed to be there), 
# to format the message received from the Telegram bot. 
# 
# Available placeholders:
# 	- {title}: The title of the expose
#	- {rooms}: Number of rooms
#	- {price}: Price for the flat
# 	- {durations}: Durations calculated by GMaps, see above
#	- {url}: URL to the expose
#	- {address}: address of the flat
#	- {date}: possible date of move
message: |
    {title} (ab {date})
    Zimmer: {rooms}
    Größe: {size}
    Preis: {price}
    Adresse: {address}

    {url}
#    Anfahrt:
#    {durations}

# Calculating durations requires access to the Google Maps API. 
# Below you can configure the URL to access the API, with placeholders.
# The URL should most probably just kept like that. 
# To use the Google Maps API, an API key is required. You can obtain one
# without costs from the Google App Console (just google for it).
google_maps_api:
    key: YOUR_API_KEY
    url: https://maps.googleapis.com/maps/api/distancematrix/json?origins={origin}&destinations={dest}&mode={mode}&sensor=true&key={key}&arrival_time={arrival}

# Sending messages using Telegram requires a Telegram Bot configured. 
# Telegram.org offers a good documentation about how to create a bot.
# Once you read it, will make sense. Still: bot_token should hold the
# access token of your bot and receiver_ids should list the client ids
# of receivers. Note that those receivers are required to already have
# started a conversation with your bot. 
# The token can be fetched over the API. At first, you need to send a 
# message to the Bot and afterwards, the event can be fetched by the 
# followinhg command:
# $ https://api.telegram.org/bot<YourBOTToken>/getUpdates
#
# telegram:
#   bot_token: 160165XXXXXXX....
#   receiver_ids:
#       - 12345....
#       - 67890....
telegram:
    bot_token: 
    receiver_ids:

# It is possible to filter entries by date of possible move. Three filters are available:
# a minimum date, a maximum date and a blacklist. The blacklist is useful for dates
# which cannot be parsed (e.g. "sofort").
#date_filter:
#    date_min: 2019-12-01
#    date_max: 2020-01-01
#    blacklist_phrases:
#        - "sofort"
date_filter:
